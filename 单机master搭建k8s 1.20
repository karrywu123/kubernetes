单机master搭建k8s 1.20

环境
172.16.10.121 （master01）
172.16.10.123 （node01）
CentOS Linux release 7.9.2009 (Core)

做服务器的网络配置,初始化,hostname,/etc/hosts等相关配置
1）初始化脚本
#!/bin/bash
#Name:base.sh
#Function:Used to setup the basic settings of server(CentOS 6)

##################################################################
timezone=/usr/share/zoneinfo/Asia/Hong_Kong
timeserver=pool.ntp.org
root_password=123456
##################################################################


marks()
{
echo "==================================================================================="
}

#set root password
echo "$root_password" |passwd --stdin "root"
marks

#Setup DNS
echo '##########Setting up DNS#########'
echo 'nameserver 8.8.8.8
nameserver 114.114.114.114
nameserver 8.8.4.4' > /etc/resolv.conf
chattr +i /etc/resolv.conf
marks

#Test the network
echo '############Testing the network#########'
ping -c5 www.google.com && echo "ok" || exit 0
marks

#Setup selinux
echo '##########Setting up selinux#############'
setenforce 0
cp /etc/selinux/config{,.bak}
echo 'SELINUX=disabled
SELINUXTYPE=targeted' > /etc/selinux/config
ls /etc/security/limits.conf.bak &> /dev/null && echo || mv /etc/security/limits.conf{,.bak}
echo '* soft nproc 65535
* hard nproc 65535
* soft nofile 65535
* hard nofile 65535' > /etc/security/limits.conf
ulimit -n 65535
marks

#Setup /etc/sysctl.com
echo '#########Setting up /etc/sysctl.conf#########'
echo '# Kernel sysctl configuration file for Red Hat Linux
#
# For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and
# sysctl.conf(5) for more details.

# Controls IP packet forwarding
net.ipv4.ip_forward = 0

# Controls source route verification
net.ipv4.conf.default.rp_filter = 1

# Do not accept source routing
net.ipv4.conf.default.accept_source_route = 0

# Controls the System Request debugging functionality of the kernel
kernel.sysrq = 0

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
kernel.core_uses_pid = 1

# Controls the use of TCP syncookies
net.ipv4.tcp_syncookies = 1

# Disable netfilter on bridges.
#net.bridge.bridge-nf-call-ip6tables = 0
#net.bridge.bridge-nf-call-iptables = 0
#net.bridge.bridge-nf-call-arptables = 0

# Controls the default maxmimum size of a mesage queue
kernel.msgmnb = 65536

# Controls the maximum size of a message, in bytes
kernel.msgmax = 65536
# Controls the maximum shared segment size, in bytes
kernel.shmmax = 68719476736

# Controls the maximum number of shared memory segments, in pages
kernel.shmall = 4294967296
fs.file-max=102400
net.ipv4.tcp_max_tw_buckets = 10000
net.ipv4.tcp_sack = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_wmem = 873200 1746400 3492800
net.ipv4.tcp_rmem = 873200 1746400 3492800
net.core.wmem_default = 8388608
net.core.rmem_default = 8388608
net.core.wmem_max = 3492800
net.core.rmem_max = 3492800
net.core.netdev_max_backlog = 262144
#net.core.somaxconn = 262144
net.ipv4.tcp_max_orphans = 3276800
net.ipv4.tcp_max_syn_backlog = 131072
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_orphan_retries = 0
net.ipv4.tcp_max_orphans = 65536
#net.ipv4.tcp_mem = 94500000 915000000 927000000
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.ip_local_port_range = 10240 65000
net.ipv4.tcp_abort_on_overflow = 1
vm.dirty_ratio=10
net.netfilter.nf_conntrack_max = 1048576
net.nf_conntrack_max = 1048576
net.netfilter.nf_conntrack_tcp_timeout_established = 360
' > /etc/sysctl.conf
#modprobe bridge
sysctl -p
marks

#Install the nessesary softwares
echo '##########Installing the nessesary softwares###########'
yum -y install epel-release
yum clean all && yum makecache
yum -y install ntpdate vim lsof openssh-clients mlocate wget make gcc net-tools rsync telnet parted zip unzip lrzsz nfs-utils dos2unix sshpass
marks

#Setup the time
echo '########Setting up the time###########'
rm -f /etc/localtime && cp  $timezone /etc/localtime
#sed -i 's/^ZONE=.*$/ZONE="America\/New_York"/g' /etc/sysconfig/clock
echo "*/30 * * * * /usr/sbin/ntpdate -u 192.168.30.3" > /var/spool/cron/root
/usr/sbin/ntpdate -u $timeserver
hwclock -w
marks

#Setup the iptables
echo '########Install iptables###########'
systemctl stop firewalld
systemctl disable firewalld 
yum -y install iptables iptables-services
service iptables restart
echo '# sample configuration for iptables service
# you can edit this manually or use system-config-firewall
# please do not ask us to add additional ports/services to this default configuration
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -s 61.238.69.58/32 -j ACCEPT
-A INPUT -s 96.9.68.136/32 -j ACCEPT
-A INPUT -s 172.16.10.0/24 -p tcp -m state --state NEW -m tcp -j ACCEPT
-A INPUT -s 172.16.10.0/24 -p udp -m state --state NEW -m udp -j ACCEPT

COMMIT' > /etc/sysconfig/iptables
systemctl enable iptables
service iptables restart
marks

#Setup the cmdlog
mkdir -p /var/log/usermonitor/
echo usermonitor >/var/log/usermonitor/usermonitor.log
chown nobody:nobody /var/log/usermonitor/usermonitor.log
echo usermonitor >/var/log/usermonitor/usermonitor.log
chmod 002 /var/log/usermonitor/usermonitor.log
chattr +a /var/log/usermonitor/usermonitor.log

tail -n 2 $0 >> /etc/profile

export HISTORY_FILE=/var/log/usermonitor/usermonitor.log
export PROMPT_COMMAND='{ date "+%y-%m-%d %T ##### $(who am i |awk "{print \$1\" \"\$2\" \"\$5}")  #### $(id|awk "{print \$1}") #### $(history 1 | { read x cmd; echo "$cmd"; })"; } >>$HISTORY_FILE'

2）参数配置
swap swapoff -a,/etc/fstab
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

yum -y install wget net-tools nfs-utils lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip  sudo ntp libaio-devel wget vim ncurses-devel autoconf automake zlib-devel python-devel epel-release openssh-server socat ipvsadm conntrack ntpdate yum-utils device-mapper-persistent-data lvm2

在/etc/hosts 文件增加如下几行：
172.16.10.121 master01
172.16.10.123 node01 gfs1
配置主机之间无密码登陆
配置 master01 到 node01 无密码登陆
在 master01 上操作
ssh-keygen -t rsa
加在 /etc/sysctl.conf后面
vm.swappiness = 0
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1

开启 ipvs
不开启 ipvs 将会使用 iptables，但是效率低，所以官网推荐需要开通 ipvs 内核，在 k8s 的各
个节点都需要开启
cat > /etc/sysconfig/modules/ipvs.modules <<EOF
#!/bin/bash
ipvs_modules="ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh 
ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack"
for kernel_module in \${ipvs_modules}; do
/sbin/modinfo -F filename \${kernel_module} > /dev/null 2>&1
if [ $? -eq 0 ]; then
/sbin/modprobe \${kernel_module}
fi
done
EOF

chmod 755 /etc/sysconfig/modules/ipvs.modules && bash 
/etc/sysconfig/modules/ipvs.modules && lsmod | grep ip_vs

重启两台服务器 

3）添加软件源
cat docker-ce.repo 
[docker-ce-stable]
name=Docker CE Stable - $basearch
baseurl=https://download.docker.com/linux/centos/$releasever/$basearch/stable
enabled=1
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg

[docker-ce-stable-debuginfo]
name=Docker CE Stable - Debuginfo $basearch
baseurl=https://download.docker.com/linux/centos/$releasever/debug-$basearch/stable
enabled=0
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg

[docker-ce-stable-source]
name=Docker CE Stable - Sources
baseurl=https://download.docker.com/linux/centos/$releasever/source/stable
enabled=0
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg

[docker-ce-test]
name=Docker CE Test - $basearch
baseurl=https://download.docker.com/linux/centos/$releasever/$basearch/test
enabled=0
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg

[docker-ce-test-debuginfo]
name=Docker CE Test - Debuginfo $basearch
baseurl=https://download.docker.com/linux/centos/$releasever/debug-$basearch/test
enabled=0
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg

[docker-ce-test-source]
name=Docker CE Test - Sources
baseurl=https://download.docker.com/linux/centos/$releasever/source/test
enabled=0
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg

[docker-ce-nightly]
name=Docker CE Nightly - $basearch
baseurl=https://download.docker.com/linux/centos/$releasever/$basearch/nightly
enabled=1
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg

[docker-ce-nightly-debuginfo]
name=Docker CE Nightly - Debuginfo $basearch
baseurl=https://download.docker.com/linux/centos/$releasever/debug-$basearch/nightly
enabled=0
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg

[docker-ce-nightly-source]
name=Docker CE Nightly - Sources
baseurl=https://download.docker.com/linux/centos/$releasever/source/nightly
enabled=0
gpgcheck=1
gpgkey=https://download.docker.com/linux/centos/gpg

cat kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl


yum clean all && yum makecache fast && yum -y update
使用脚本安装docker
sh 1-docker-install.sh

#!/bin/bash
#install docker
yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine

yum install -y yum-utils
yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

yum-config-manager --enable docker-ce-nightly

#yum install -y docker-ce docker-ce-cli containerd.io
yum install -y docker-ce-19.03.9 docker-ce-cli-19.03.9 containerd.io

systemctl status docker
systemctl restart docker
systemctl enable docker


#install docker-compose
curl -L "https://github.com/docker/compose/releases/download/1.26.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose

#docker dir to /home
systemctl stop docker
mv /var/lib/docker /home/
ln -s /home/docker /var/lib/docker
systemctl start docker

#install docker-enter
docker run --rm -v /usr/local/bin:/target jpetazzo/nsenter

#correct iptables config
echo "****************谨慎修改iptables,一定要用iptables-save > /etc/sysconfig/iptables,避免iptables弄错****************"


安装k8s软件
yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
systemctl enable kubelet && systemctl start kubelet && systemctl status kubelet


kubeadm config images pull #下载镜像
创建master单机的
kubeadm init --kubernetes-version=v1.20.4 --upload-certs --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16

kubeadm init --kubernetes-version=v1.20.4 --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=172.16.10.121

mkdir -p $HOME/.kube && sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && sudo chown $(id -u):$(id -g) $HOME/.kube/config

配置网络,主节点操作
wget https://docs.projectcalico.org/manifests/calico.yaml #下载文件
cat kubeadm-init.yaml | grep serviceSubnet: #查看
打开calico.yaml, 将192.168.0.0/16修改为10.96.0.0/12
kubectl apply -f calico.yaml #初始化网络
kubectl get nodes #查看节点

如果手动建过自定义网络,请删除
docker network rm selfnetwork
建议添加网卡匹配，以免多网卡出现问题
            - name: IP_AUTODETECTION_METHOD
              value: "interface=ens.*"

安装calicoctl查看网络配置状态
wget -O /usr/local/bin/calicoctl   https://github.com/projectcalico/calicoctl/releases/download/v3.16.3/calicoctl
chmod +x /usr/local/bin/calicoctl
calicoctl node status

或者安装kube flannel网络
wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml #修改网段
kubectl apply -f kube-flannel.yml

或者官网建议
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

mkdir -p $HOME/.kube && sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && sudo chown $(id -u):$(id -g) $HOME/.kube/config


在master节点查看集群的token值

[root@master01 ~]#  kubeadm token create --print-join-command
kubeadm join 172.16.10.121:6443 --token b2vtyh.grpd5kc7onapa0lm     --discovery-token-ca-cert-hash sha256:06ea1e5fec2177db961c8de8064106f23c9efed272a44032b8fb600187e6d047 



8. 安装部署Dashboard
建议iptables forward规则完全放行,不然可能会出现创建应用失败的情况
iptables -P INPUT ACCEPT   
iptables -P OUTPUT ACCEPT

https://github.com/kubernetes/dashboard
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml #下载文件
kubectl apply -f recommended.yaml #安装
kubectl get pods --all-namespaces #查看pods状态 
kubectl get pods --all-namespaces | grep dashboard

9. 创建Dashboard管理用户并且生成证书
cat dashboard-adminuser.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system

kubectl apply -f dashboard-adminuser.yaml
grep 'client-certificate-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.crt
grep 'client-key-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.key
openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name "kubernetes-client"

10. 客户端电脑导入上述生成的证书并且登陆面板
https://172.16.10.121:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login

kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}') #查看token


